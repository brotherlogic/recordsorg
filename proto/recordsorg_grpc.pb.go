// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RecordsOrgServiceClient is the client API for RecordsOrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordsOrgServiceClient interface {
	GetOrg(ctx context.Context, in *GetOrgRequest, opts ...grpc.CallOption) (*GetOrgResponse, error)
}

type recordsOrgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordsOrgServiceClient(cc grpc.ClientConnInterface) RecordsOrgServiceClient {
	return &recordsOrgServiceClient{cc}
}

func (c *recordsOrgServiceClient) GetOrg(ctx context.Context, in *GetOrgRequest, opts ...grpc.CallOption) (*GetOrgResponse, error) {
	out := new(GetOrgResponse)
	err := c.cc.Invoke(ctx, "/recordsorg.RecordsOrgService/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordsOrgServiceServer is the server API for RecordsOrgService service.
// All implementations should embed UnimplementedRecordsOrgServiceServer
// for forward compatibility
type RecordsOrgServiceServer interface {
	GetOrg(context.Context, *GetOrgRequest) (*GetOrgResponse, error)
}

// UnimplementedRecordsOrgServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordsOrgServiceServer struct {
}

func (UnimplementedRecordsOrgServiceServer) GetOrg(context.Context, *GetOrgRequest) (*GetOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}

// UnsafeRecordsOrgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordsOrgServiceServer will
// result in compilation errors.
type UnsafeRecordsOrgServiceServer interface {
	mustEmbedUnimplementedRecordsOrgServiceServer()
}

func RegisterRecordsOrgServiceServer(s grpc.ServiceRegistrar, srv RecordsOrgServiceServer) {
	s.RegisterService(&_RecordsOrgService_serviceDesc, srv)
}

func _RecordsOrgService_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsOrgServiceServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordsorg.RecordsOrgService/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsOrgServiceServer).GetOrg(ctx, req.(*GetOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordsOrgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordsorg.RecordsOrgService",
	HandlerType: (*RecordsOrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrg",
			Handler:    _RecordsOrgService_GetOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordsorg.proto",
}
